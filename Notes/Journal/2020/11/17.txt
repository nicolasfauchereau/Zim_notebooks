Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-11-17T12:29:38+13:00

====== Tuesday 17 Nov 2020 ======

==== Watercare: comparison of tercile categories for the NNI and the Waitakere and Hunuas ranges time-series ====

see **compare_NNI_Watercare.ipynb** in [[/home/nicolasf/research/Smart_Ideas/code/targets/analysis]] 

for tercile, **rain**, % of matching seasons 

Waitakere: 72%
Hunuas: 70% 

for tercile, **tmean**, % of matching seasons

Waitakere: 72% 
Hunuas: 84.7%

== forecasts ==

for **rainfall,** SCO derived acc.

**Hunuas ranges:** 

0.524390243902439

per season: 

1     0.550000
2     0.550000
3     0.450000
4     0.650000
5     0.600000
6     0.400000
7     0.666667
8     0.571429
9     0.428571
10    0.476190
11    0.571429
12    0.380952

**Waitakere ranges**

0.4878 

per season: 

1     0.500000
2     0.500000
3     0.350000
4     0.650000
5     0.650000
6     0.450000
7     0.523810
8     0.476190
9     0.476190
10    0.380952
11    0.523810
12    0.380952

for **tmean,** SCO derived acc.

**Hunuas ranges:** 

0.6056910569105691

per season: 

1     0.500000
2     0.550000
3     0.500000
4     0.700000
5     0.750000
6     0.550000
7     0.571429
8     0.619048
9     0.571429
10    0.714286
11    0.619048
12    0.619048

**Waitakere ranges**

0.5203252032520326

per season: 

1     0.500000
2     0.500000
3     0.500000
4     0.600000
5     0.550000
6     0.300000
7     0.428571
8     0.523810
9     0.476190
10    0.714286
11    0.523810
12    0.619048

--------------------

==== for Watercare, Waitakere, Rainfall ====



training and evaluating for season 1
(38, 23887)
best model is NeuralNetClassifier_STACKER_l0, validation accuracy reaching 0.5526315789473685

training and evaluating for season 2
(38, 23887)
best model is NeuralNetClassifier_STACKER_l0, validation accuracy reaching 0.5

training and evaluating for season 3
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.5

training and evaluating for season 4
(38, 23887)
best model is NeuralNetClassifier_STACKER_l0, validation accuracy reaching 0.42105263157894735

training and evaluating for season 5
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.5

training and evaluating for season 6
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.631578947368421

training and evaluating for season 7
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.47368421052631576

training and evaluating for season 8
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.7894736842105263

training and evaluating for season 9
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.631578947368421

training and evaluating for season 10
(39, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.5641025641025641

training and evaluating for season 11
(39, 23887)
best model is weighted_ensemble_k0_l1, validation accuracy reaching 0.5897435897435898

training and evaluating for season 12
(39, 23887)
best model is LightGBMClassifierCustom_STACKER_l0, validation accuracy reaching 0.46153846153846156

training and evaluating for season 1
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.5789473684210527

training and evaluating for season 2
(38, 23887)
best model is CatboostClassifier_STACKER_l0, validation accuracy reaching 0.5526315789473685

training and evaluating for season 3
(38, 23887)
best model is weighted_ensemble_k0_l1, validation accuracy reaching 0.6052631578947368




--------------------

=== Awesome-EarthObservation-Code ===

@Satellite @remotesensing @geospatial 

https://github.com/acgeospatial/awesome-earthobservation-code 

and cloned locally in [[~/sources]] 	

--------------------

==== some examples of climate data analysis ====

https://towardsdatascience.com/climate-is-what-you-expect-20c57da1ac24 

includes examples using proplot for geographic mapping, and esmtools (https://esmtools.readthedocs.io/en/latest/) which contains some interesting functions 







